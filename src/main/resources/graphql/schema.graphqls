scalar Date

type Author {
    id: ID!
    name: String!
    birthdate: Date
    nationality: String
    books: [Book!]
    awards: [Award!]
}

type Book {
    id: ID!
    title: String!
    publicationDate: Date
    genre: String
    author: Author!
    reviews: [Review!]
    publishers: [Publisher!]
}

type Publisher {
    id: ID!
    name: String!
    address: String
    contact: String
    books: [Book!]
}

type Review {
    id: ID!
    reviewerName: String!
    rating: Int!
    comments: String
    book: Book!
}

type Award {
    id: ID!
    name: String!
    year: Int!
    author: Author!
}

type Query {
    allAuthors: [Author!]
    authorById(id: ID!): Author
    allBooks: [Book!]
    bookById(id: ID!): Book
    allPublishers: [Publisher!]
    publisherById(id: ID!): Publisher
    allReviews: [Review!]
    reviewById(id: ID!): Review
    allAwards: [Award!]
    awardById(id: ID!): Award
}

type Mutation {
    createAuthor(name: String!, birthdate: Date, nationality: String): Author!
    updateAuthor(id: ID!, name: String, birthdate: Date, nationality: String): Author!
    deleteAuthor(id: ID!): Boolean!

    createBook(title: String!, publicationDate: Date, genre: String, authorId: ID!): Book!
    updateBook(id: ID!, title: String, publicationDate: Date, genre: String, authorId: ID!): Book!
    deleteBook(id: ID!): Boolean!

    createPublisher(name: String!, address: String, contact: String): Publisher!
    updatePublisher(id: ID!, name: String, address: String, contact: String): Publisher!
    deletePublisher(id: ID!): Boolean!

    createReview(reviewerName: String!, rating: Int!, comments: String, bookId: ID!): Review!
    updateReview(id: ID!, reviewerName: String, rating: Int, comments: String, bookId: ID!): Review!
    deleteReview(id: ID!): Boolean!

    createAward(name: String!, year: Int!, authorId: ID!): Award!
    updateAward(id: ID!, name: String, year: Int, authorId: ID!): Award!
    deleteAward(id: ID!): Boolean!
}